
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DIVIDE ELSE END EQUALS FOR ID IF INT LBRACE LPAREN MINUS NUMBER PLUS PRINT QUOTE RBRACE READ RPAREN SEMICOLON STRING TIMES WHILEprogram : ID LBRACE declarations statements ENDdeclarations : type ID COMMA ID COMMA ID SEMICOLON\n                    | type ID SEMICOLONtype : INTstatements : statement statements\n                  | statementstatement : READ ID SEMICOLONstatement : ID EQUALS expression SEMICOLONstatement : PRINT LPAREN STRING RPAREN SEMICOLONexpression : ID PLUS ID\n                  | ID MINUS ID\n                  | ID TIMES ID\n                  | ID DIVIDE ID'
    
_lr_action_items = {'ID':([0,4,5,6,9,10,13,18,19,22,25,26,27,28,29,31,36,38,],[2,7,12,-4,7,16,20,24,-3,-7,32,33,34,35,-8,37,-9,-2,]),'$end':([1,14,],[0,-1,]),'LBRACE':([2,],[3,]),'INT':([3,],[6,]),'READ':([4,9,19,22,29,36,38,],[10,10,-3,-7,-8,-9,-2,]),'PRINT':([4,9,19,22,29,36,38,],[11,11,-3,-7,-8,-9,-2,]),'EQUALS':([7,],[13,]),'END':([8,9,15,22,29,36,],[14,-6,-5,-7,-8,-9,]),'LPAREN':([11,],[17,]),'COMMA':([12,24,],[18,31,]),'SEMICOLON':([12,16,21,30,32,33,34,35,37,],[19,22,29,36,-10,-11,-12,-13,38,]),'STRING':([17,],[23,]),'PLUS':([20,],[25,]),'MINUS':([20,],[26,]),'TIMES':([20,],[27,]),'DIVIDE':([20,],[28,]),'RPAREN':([23,],[30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declarations':([3,],[4,]),'type':([3,],[5,]),'statements':([4,9,],[8,15,]),'statement':([4,9,],[9,9,]),'expression':([13,],[21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ID LBRACE declarations statements END','program',5,'p_program','analizador_lexico-Sintactico.py',72),
  ('declarations -> type ID COMMA ID COMMA ID SEMICOLON','declarations',7,'p_declarations','analizador_lexico-Sintactico.py',76),
  ('declarations -> type ID SEMICOLON','declarations',3,'p_declarations','analizador_lexico-Sintactico.py',77),
  ('type -> INT','type',1,'p_type','analizador_lexico-Sintactico.py',81),
  ('statements -> statement statements','statements',2,'p_statements','analizador_lexico-Sintactico.py',85),
  ('statements -> statement','statements',1,'p_statements','analizador_lexico-Sintactico.py',86),
  ('statement -> READ ID SEMICOLON','statement',3,'p_statement_read','analizador_lexico-Sintactico.py',90),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assign','analizador_lexico-Sintactico.py',94),
  ('statement -> PRINT LPAREN STRING RPAREN SEMICOLON','statement',5,'p_statement_print','analizador_lexico-Sintactico.py',98),
  ('expression -> ID PLUS ID','expression',3,'p_expression_binop','analizador_lexico-Sintactico.py',102),
  ('expression -> ID MINUS ID','expression',3,'p_expression_binop','analizador_lexico-Sintactico.py',103),
  ('expression -> ID TIMES ID','expression',3,'p_expression_binop','analizador_lexico-Sintactico.py',104),
  ('expression -> ID DIVIDE ID','expression',3,'p_expression_binop','analizador_lexico-Sintactico.py',105),
]
